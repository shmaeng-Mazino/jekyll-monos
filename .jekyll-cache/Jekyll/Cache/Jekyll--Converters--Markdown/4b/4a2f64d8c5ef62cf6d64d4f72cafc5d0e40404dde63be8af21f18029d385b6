I"<<h1 id="algorithm---빅오표기법-시간복잡도-공간복잡도">algorithm - 빅오표기법, 시간복잡도, 공간복잡도</h1>

<p><br /></p>

<blockquote>
  <p>Big-O 표기법 (big-O notation)</p>
</blockquote>

<p>빅오 표기법은 알고리즘의 효율성을 표기해주는 표기법이다.
<br />알고리즘의 효율성은 데이터 개수(n)가 주어졌을 때 덧셈, 뺄셈, 곱셈 같은 기본 연산의 횟수를 의미한다.
<br />빅오 표기법은 보통 알고리즘의 시간 복잡도와 공간 복잡도를 나타내는데 주로 사용 된다.
<br />시간 복잡도는 알고리즘의 시간 효율성을 의미하고, 
<br />공간 복잡도는 알고리즘의 공간(메모리) 효율성을 의미한다.
<br />시간과 공간 복잡도를 나타내는 방법으로는 점근 표기법이라고 해서
<br />빅오(Big-O), 빅오메가(big-Ω),빅세타(big-Θ) 표기법이 있다.</p>

<p><br /></p>

<blockquote>
  <p>Big-O 표기법의 종류</p>
</blockquote>

<ol>
  <li>O(1)</li>
  <li>O(n)</li>
  <li>O(log n)</li>
  <li>O(n2)</li>
  <li>O(2n)</li>
</ol>

<p><br /></p>

<p><img src="/public/img/BigO.png" width="450px" height="300px" title="BigO" alt="BigO" /></p>

<p><br /></p>

<blockquote>
  <p>Big-O 표기법 예제</p>
</blockquote>

<ol>
  <li>O(1) : 스택에서 Push, Pop</li>
  <li>O(log n) : 이진트리</li>
  <li>O(n) : for 문</li>
  <li>O(n log n) : 퀵 정렬(quick sort), 병합정렬(merge sort), 힙 정렬(heap Sort)</li>
  <li>O(n2): 이중 for 문, 삽입정렬(insertion sort), 거품정렬(bubble sort), 선택정렬(selection sort)</li>
  <li>O(2n) : 피보나치 수열</li>
</ol>

<p><br /></p>

<blockquote>
  <p>O(1)</p>
</blockquote>

<p>O(1)는 일정한 복잡도(constant complexity)라고 하며, 입력값이 증가하더라도 시간이 늘어나지 않는다.
<br />입력값의 크기와 관계없이, 즉시 출력값을 얻어낼 수 있다는 의미이다.</p>

<p><img src="/public/img/BigO_O(1).png" width="450px" height="300px" title="BigO" alt="O(1)" /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">addUpTo</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">n</span> <span class="o">*</span> <span class="p">(</span><span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<blockquote>
  <p>O(n)</p>
</blockquote>

<p>O(n)은 선형 복잡도(linear complexity)라고 부르며, 입력값이 증가함에 따라
<br />시간 또한 같은 비율로 증가하는 것을 의미한다.
<br />예를 들어 입력값이 1일 때 1초의 시간이 걸리고, 입력값을 100배로 증가시켰을 때
<br />1초의 100배인 100초가 걸리는 알고리즘을 구현했다면,
<br />그 알고리즘은 O(n)의 시간 복잡도를 가진다고 할 수 있다.</p>

<p><img src="/public/img/BigO_O(n).png" width="450px" height="300px" title="BigO" alt="O(n)" /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">addUpTo</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">total</span> <span class="o">+=</span> <span class="nx">i</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">total</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<blockquote>
  <p>O(log n)</p>
</blockquote>

<p>O(log n)은 로그 복잡도(logarithmic complexity)라고 부르며,
<br />Big-O표기법중 O(1) 다음으로 빠른 시간 복잡도를 가진다.
<br />BST(Binary Search Tree)에선 원하는 값을 탐색할 때, 
<br />노드를 이동할 때마다 경우의 수가 절반으로 줄어든다.
<br />이해하기 쉬운 게임으로 비유해 보자면 up &amp; down을 예로 들 수 있다.
<br />1~100 중 하나의 숫자를 플레이어1이 고른다. (30을 골랐다고 가정한다.)
<br />50(가운데) 숫자를 제시하면 50보다 작으므로 down을 외친다.
<br />경우의 수를 계속 절반으로 줄여나가며 정답을 찾는다.
<br />매번 숫자를 제시할 때마다 경우의 수가 절반이 줄어들기 때문에 
<br />최악의 경우에도 7번이면 원하는 숫자를 찾아낼 수 있게 된다.
<br />BST의 값 탐색 또한 이와같은 로직으로, O(log n)의 시간 복잡도를 가진 알고리즘(탐색기법)이다.</p>

<p><img src="/public/img/BigO_O(log n).png" width="450px" height="300px" title="BigO" alt="O(log n)" /></p>

<p><br /></p>

<blockquote>
  <p>O(n2)</p>
</blockquote>

<p>O(n2)은 2차 복잡도(quadratic complexity)라고 부르며, 
<br />입력값이 증가함에 따라 시간이 n의 제곱수의 비율로 증가하는 것을 의미한다.
<br />예를 들어 입력값이 1일 경우 1초가 걸리던 알고리즘에 5라는 값을 주었더니 25초가 걸리게 된다면, 
<br />이 알고리즘의 시간 복잡도는 O(n2)라고 표현한다.</p>

<p><img src="/public/img/BigO_O(log n).png" width="450px" height="300px" title="BigO" alt="O(log n)" /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">printAllPairs</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<p>참고 (References)
<br />https://noahlogs.tistory.com/27</p>
:ET